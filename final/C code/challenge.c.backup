#include "challenge.h"
#include "maze.h"
#include "list.h"
#include "state.h"
#include "location.h"
#include "instructions.h"
#include "config.h"
#include "xbee.h"
#include <stdio.h>
#include <windows.h>

void printInstructions(List *instructions)
{
    Instruction *instruction;
    for (int i = 0; i < instructions->length; ++i) {
        instruction = getListData(instructions, i);
        printf("%4x", instruction->code);
        if (instruction->code & CHECKPOINT || instruction->code & CHECK_AND_BACK)
            putchar('\n');
    }
    putchar('\n');
}

bool removeIfEqual(List *places, Location *location)
{
    Location *current;
    for (int i = 1; i < places->length; ++i) {
        current = getListData(places, i);
        if (location->i == current->i && location->j == current->j) {
            removeIndex(places, i);
            return true;
        }
    }

    return false;
}

void challengeA(int a, int b, int c, int d)
{
    Maze maze = initMaze(false);
    State state = setState(a);
    List *places = initList(sizeof(Location));
    Location location;
    location = setLocation(a);  addList(places, &location);
    location = setLocation(b);  addList(places, &location);
    location = setLocation(c);  addList(places, &location);
    location = setLocation(d);  addList(places, &location);


    //XBEE STUFF
    HANDLE hSerial;
    hSerial = CreateFile(COMPORT,
    GENERIC_READ | GENERIC_WRITE,
    0,
    0,
    OPEN_EXISTING,
    FILE_ATTRIBUTE_NORMAL,
    0
    );
    initSio(hSerial);

    List *instructions = bruteforceInstructions(maze, state, places);
    printInstructions(instructions);

    int count = 1;
    unsigned char buffer = BUFFER_SUCCES;
    Instruction *instruction;

    while (count < instructions->length) {
        if (buffer == BUFFER_NO_MINE || buffer == BUFFER_SUCCES) {
            instruction = getListData(instructions, count);
            buffer = instruction->code;

            writeByte(hSerial, &buffer);

            count += 2;
        }
        readByte(hSerial, &buffer);
    }

    deleteList(places);
    deleteList(instructions);
}

void challengeB(int a, int b, int c, int d)
{
    Maze maze = initMaze(true);
    State state = setState(a);
    List *places = initList(sizeof(Location));
    Location location;
    location = setLocation(a);  addList(places, &location);
    location = setLocation(b);  addList(places, &location);
    location = setLocation(c);  addList(places, &location);
    location = setLocation(d);  addList(places, &location);

    List *all_places = copyList(places);

    //XBEE STUFF
    HANDLE hSerial;
    hSerial = CreateFile(COMPORT,
    GENERIC_READ | GENERIC_WRITE,
    0,
    0,
    OPEN_EXISTING,
    FILE_ATTRIBUTE_NORMAL,
    0
    );
    initSio(hSerial);


    List *instructions = bruteforceInstructions(maze, state, places);
    printInstructions(instructions);

    int count = 1;
    unsigned char buffer = BUFFER_SUCCES;
    Instruction *instruction;
    while (count < instructions->length) {
        if (buffer == BUFFER_MINE) {
            instruction = getListData(instructions, count - 2);
            addMine(&maze, instruction->location);
            checkMinesNotPossible(&maze, all_places);
            state = instruction->state * -1;
            if (count > 2) { 
                instruction = getListData(instructions, count - 3);
                setList(places, 0, &instruction->location);
            }
            deleteList(instructions);
            instructions = bruteforceInstructions(maze, state, places);

            count = 0;
            buffer = BUFFER_SUCCES;

        } if (buffer == BUFFER_NO_MINE || buffer == BUFFER_SUCCES) {
            instruction = getListData(instructions, count);
            buffer = instruction->code;

            if (count > 1) {
                instruction = getListData(instructions, count - 2);
                addNoMine(&maze, instruction->location);
            }

            removeIfEqual(places, &instruction->location);

            writeByte(hSerial, &buffer);

            count += 2;
        }
        readByte(hSerial, &buffer);
    }

    deleteList(all_places);
    deleteList(places);
    deleteList(instructions);
}

void challengeC()
{
    Maze maze = initMaze(true);
    State state = setState(START);
    List *places = initList(sizeof(Location));
    Location location = setLocation(START); addList(places, &location);
    for (int i = 0; i < 11; ++i) {
        for (int j = 0; j < 11; ++j) {
            if (maze.mines_possible[i][j] == true) {
                location.i = i;
                location.j = j;
                addList(places, &location);
            }
        }
    }
    List *all_places = copyList(places);
    
    //XBEE STUFF
    HANDLE hSerial;
    hSerial = CreateFile(COMPORT,
    GENERIC_READ | GENERIC_WRITE,
    0,
    0,
    OPEN_EXISTING,
    FILE_ATTRIBUTE_NORMAL,
    0
    );
    initSio(hSerial);

    List *instructions = approximateInstructions(maze, state, places);
    printInstructions(instructions);
    int number_of_mines_found = 0;
    int count = 1;
    unsigned char buffer = BUFFER_SUCCES;
    Instruction *instruction;

    while (number_of_mines_found < MAX_NUMBER_OF_MINES) {
        if (buffer == BUFFER_MINE) {
            ++number_of_mines_found;
            instruction = getListData(instructions, count - 2);
            addMine(&maze, instruction->location); printf("MINE ADDED AT %d %d", instruction->location.i, instruction->location.j);
            removeIfEqual(places, &instruction->location);
            
            state = instruction->state * -1;
            printf("COMPUTE STATE: %d\n", state);
            if (count > 2) { 
                instruction = getListData(instructions, count - 3);
                setList(places, 0, &instruction->location);
            }
            printf("COMPUTE_LOCATION: %d %d\n", instruction->location.i, instruction->location.j);
            deleteList(instructions);
            instructions = approximateInstructions(maze, state, places);
            printInstructions(instructions);
            printf("NUMBER_OF_MINES_FOUND: %d\n", number_of_mines_found);
            count = 0;
            buffer = BUFFER_SUCCES;
            if (number_of_mines_found == MAX_NUMBER_OF_MINES)
                buffer = 0xFF;
        } if (buffer == BUFFER_NO_MINE) {
            buffer = BUFFER_SUCCES; // don't know what here yet recalculate the road and remove it from places list
        } if (buffer == BUFFER_SUCCES) {

            instruction = getListData(instructions, count);
            buffer = instruction->code;

            if (count > 1) {
                instruction = getListData(instructions, count - 2);
                addNoMine(&maze, instruction->location); printf("NOMINE ADDED AT %d %d\n", instruction->location.i, instruction->location.j);
                removeIfEqual(places, &instruction->location);
            }

            writeByte(hSerial, &buffer);

            count += 2;
        }
        readByte(hSerial, &buffer);
    }
    printf("DONE, number_of_mines_found: %d\n", number_of_mines_found);
}



// works :)
// void challengeC()
// {
//     Maze maze = initMaze(true);
//     State state = setState(START);
//     List *places = initList(sizeof(Location));
//     Location location = setLocation(START); addList(places, &location);
//     for (int i = 0; i < 11; ++i) {
//         for (int j = 0; j < 11; ++j) {
//             if (maze.mines_possible[i][j] == true) {
//                 location.i = i;
//                 location.j = j;
//                 addList(places, &location);
//             }
//         }
//     }
//     List *all_places = copyList(places);
//     //XBEE STUFF
//     HANDLE hSerial;
//     hSerial = CreateFile(COMPORT,
//     GENERIC_READ | GENERIC_WRITE,
//     0,
//     0,
//     OPEN_EXISTING,
//     FILE_ATTRIBUTE_NORMAL,
//     0
//     );
//     initSio(hSerial);

//     List *instructions = approximateInstructions(maze, state, places);
//     printInstructions(instructions);
//     int number_of_mines_found = 0;
//     int count = 1;
//     unsigned char buffer = BUFFER_SUCCES;
//     Instruction *instruction;

//     while (number_of_mines_found < NUMBER_OF_MINES) {
//         if (buffer == BUFFER_MINE) {
//             ++number_of_mines_found;
//             instruction = getListData(instructions, count - 2);
//             addMine(&maze, instruction->location); printf("MINE ADDED AT %d %d", instruction->location.i, instruction->location.j);
//             removeIfEqual(places, &instruction->location);
            
//             state = instruction->state * -1;
//             printf("COMPUTE STATE: %d\n", state);
//             if (count > 2) { 
//                 instruction = getListData(instructions, count - 3);
//                 setList(places, 0, &instruction->location);
//             }
//             printf("COMPUTE_LOCATION: %d %d\n", instruction->location.i, instruction->location.j);
//             deleteList(instructions);
//             instructions = approximateInstructions(maze, state, places);
//             printInstructions(instructions);
//             printf("NUMBER_OF_MINES_FOUND: %d\n", number_of_mines_found);
//             count = 0;
//             buffer = BUFFER_SUCCES;
//             if (number_of_mines_found == NUMBER_OF_MINES)
//                 buffer = 0xFF;
//         } if (buffer == BUFFER_NO_MINE) {
//             buffer = BUFFER_SUCCES; // don't know what here yet
//         } if (buffer == BUFFER_SUCCES) {

//             instruction = getListData(instructions, count);
//             buffer = instruction->code;

//             if (count > 1) {
//                 instruction = getListData(instructions, count - 2);
//                 addNoMine(&maze, instruction->location); printf("NOMINE ADDED AT %d %d\n", instruction->location.i, instruction->location.j);
//                 removeIfEqual(places, &instruction->location);
//             }

//             //removeIfEqual(places, &instruction->location);

//             writeByte(hSerial, &buffer);

//             count += 2;
//         }
//         readByte(hSerial, &buffer);
//     }
//     printf("DONE, number_of_mines_found: %d\n", number_of_mines_found);
//     Sleep(234234324);
// }




/*
void challengeC()
{
    Maze maze = initMaze(true);
    State state = setState(START);
    List *places = initList(sizeof(Location));
    Location location = setLocation(START); addList(places, &location);
    for (int i = 0; i < 11; ++i) {
        for (int j = 0; j < 11; ++j) {
            if (maze.mines_possible[i][j] == true) {
                location.i = i;
                location.j = j;
                addList(places, &location);
            }
        }
    }
    List *all_places = copyList(places);
    //XBEE STUFF
    HANDLE hSerial;
    hSerial = CreateFile(COMPORT,
    GENERIC_READ | GENERIC_WRITE,
    0,
    0,
    OPEN_EXISTING,
    FILE_ATTRIBUTE_NORMAL,
    0
    );
    initSio(hSerial);

    List *instructions = approximateInstructions(maze, state, places);
    printInstructions(instructions);
    int number_of_mines_found = 0;
    int count = 1;
    unsigned char buffer = BUFFER_SUCCES;
    Instruction *instruction;
    while (number_of_mines_found < NUMBER_OF_MINES) {
        if (buffer == BUFFER_MINE) {
            instruction = getListData(instructions, count - 2);
            addMine(&maze, instruction->location);
            ++number_of_mines_found; printf("NUMBER_OF_MINES_FOUND: %d\n", number_of_mines_found);
            removeIfEqual(places, &instruction->location);// do removeIfEqual here?
            state = instruction->state * -1;
            
            if (count > 2) {
                instruction = getListData(instructions, count - 3);
                setList(places, 0, &instruction->location);
            }

            deleteList(instructions);
            instructions = bruteforceInstructions(maze, state, places);
            count = 0;
            buffer = BUFFER_SUCCES;

        } if ((buffer == BUFFER_NO_MINE || buffer == BUFFER_SUCCES) && number_of_mines_found < NUMBER_OF_MINES) {
            instruction = getListData(instructions, count);
            buffer = instruction->code;
            state = instruction->state;

            if (count > 1) {
                instruction = getListData(instructions, count - 2);
                addNoMine(&maze, instruction->location);
 
                if (removeIfEqual(places, &instruction->location)) {

                    instruction = getListData(instructions, count - 1);
                    setList(places, 0, &instruction->location);
                    deleteList(instructions);
                    instructions = approximateInstructions(maze, state, places);
                    count = -2;
                    printf("COMPUTE state: %d, LOCATION %d %d\n", state, instruction->location.i, instruction->location.j);
                    Sleep(3242342);
                }
            }

            writeByte(hSerial, &buffer);

            count += 2;
        }
        readByte(hSerial, &buffer);
    }

    printf("ALL MINES FOUNT\n");
    printMaze(maze);
    scanf("dummy scanf: %d", &count);

    deleteList(places);
    deleteList(all_places);
    deleteList(instructions);
}
*/